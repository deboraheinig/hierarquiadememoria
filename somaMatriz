########################################################################
#Alunas: Emmanuelle, Deborah e Paola 

#Trabalho 2 - M2
########################################################################

.data
	matriz_A: .word 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
	matriz_B: .word 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99
	matriz_C: .word 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	ordem: .asciz "Entre com o tamanho do Ìndice das matrizes (m·x. = 10): "	
	tipo: .asciz "Como vocÍ deseja percorrer a matriz: 0 para linha_coluna; 1 para coluna_linha: "	
	linha: .asciz "\n"
	coluna: .asciz "\t"
	valor_invalido: .asciz "Valor inv·lido.\n"
	tipo_invalido: .asciz "Tipo inv·lido.\n"
	
.text
jal zero, main

soma_linha_coluna:
	add t6, zero, a0 # Copia o valor de a0 para t6
	for_i_lc:
		beq t0, t6, fim_i_lc # Se t0 È igual a t6, pula para fim_i_lc
		add t1, zero, zero # Zera o registrador t1
		for_j_lc:
			beq t1, t6, fim_j_lc # Se t1 È igual a t6, pula para fim_j_lc
			slli t2, t0, 2 # Multiplica t0 por 4 e armazena em t2
			slli t3, t1, 2 # Multiplica t1 por 4 e armazena em t3
			mul t2, t2, t6 # Multiplica t2 por t6 e armazena em t2
			add t3, t2, t3 # Soma t2 e t3 e armazena em t3
			add t4, t3, a1 # Soma t3 e a1 e armazena em t4
			add t5, t3, a2 # Soma t3 e a2 e armazena em t5
			add t3, t3, a3 # Soma t3 e a3 e armazena em t3
			lw s1, 0(t4)   # Carrega o valor da memÛria no endereÁo t4 para s1
			lw s2, 0(t5)   # Carrega o valor da memÛria no endereÁo t5 para s2
			lw s3, 0(t3)   # Carrega o valor da memÛria no endereÁo t3 para s3
			add s0, s1, s2 # Soma s1 e s2 e armazena em s0
			sw s0, 0(t3)   # Armazena o valor de s0 na memÛria no endereÁo t3
			add a0, zero, s0 # Copia o valor de s0 para a0
			addi a7, zero, 1 # Define a7 como 1 para a chamada de sistema de impress„o
			ecall # Realiza a chamada de sistema para imprimir
			addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
			la a0, coluna # Carrega o endereÁo da string "coluna" para a0
			ecall # Realiza a chamada de sistema para imprimir
			addi t1, t1, 1 # Incrementa t1
			jal zero, for_j_lc # Pula para for_j_lc
		fim_j_lc:
		addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
		la a0, linha # Carrega o endereÁo da string "linha" para a0
		ecall # Realiza a chamada de sistema para imprimir
		addi t0, t0, 1 # Incrementa t0
		jal zero, for_i_lc # Pula para for_i_lc
	fim_i_lc:
	jalr zero, ra, 0 # Retorna para o endereÁo armazenado em ra

	
soma_coluna_linha:
	add t6, zero, a0 # Copia o valor de a0 para t6
	for_i_cl:
		beq t0, t6, fim_i_cl # Se t0 È igual a t6, pula para fim_i_cl
		add t1, zero, zero # Zera o registrador t1
		for_j_cl:
			beq t1, t6, fim_j_cl # Se t1 È igual a t6, pula para fim_j_cl
			slli t2, t0, 2 # Multiplica t0 por 4 e armazena em t2
			slli t3, t1, 2 # Multiplica t1 por 4 e armazena em t3
			mul t3, t3, t6 # Multiplica t3 por t6 e armazena em t3
			add t3, t2, t3 # Soma t2 e t3 e armazena em t3
			add t4, t3, a1 # Soma t3 e a1 e armazena em t4
			add t5, t3, a2 # Soma t3 e a2 e armazena em t5
			add t3, t3, a3 # Soma t3 e a3 e armazena em t3
			lw s1, 0(t4)   # Carrega o valor da memÛria no endereÁo t4 para s1
			lw s2, 0(t5)   # Carrega o valor da memÛria no endereÁo t5 para s2
			lw s3, 0(t3)   # Carrega o valor da memÛria no endereÁo t3 para s3
			add s0, s1, s2 # Soma s1 e s2 e armazena em s0
			sw s0, 0(t3)   # Armazena o valor de s0 na memÛria no endereÁo t3
			add a0, zero, s0 # Copia o valor de s0 para a0
			addi a7, zero, 1 # Define a7 como 1 para a chamada de sistema de impress„o
			ecall # Realiza a chamada de sistema para imprimir
			addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
			la a0, coluna # Carrega o endereÁo da string "coluna" para a0
			ecall # Realiza a chamada de sistema para imprimir
			addi t1, t1, 1 # Incrementa t1
			jal zero, for_j_cl # Pula para for_j_cl
		fim_j_cl:
		addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
		la a0, linha # Carrega o endereÁo da string "linha" para a0
		ecall # Realiza a chamada de sistema para imprimir
		addi t0, t0, 1 # Incrementa t0
		jal zero, for_i_cl # Pula para for_i_cl
	fim_i_cl:
	jalr zero, ra, 0 # Retorna para o endereÁo armazenado em ra

	
main:
	addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
	la a0, ordem # Carrega o endereÁo da string "ordem" para a0
	ecall # Realiza a chamada de sistema para imprimir
	addi a7, zero, 5 # Define a7 como 5 para a chamada de sistema de leitura
	ecall # Realiza a chamada de sistema para ler um n˙mero inteiro
	addi a6, zero, 1 # Define a6 como 1
	ble a0, a6, ordem_invalida # Se a0 È menor ou igual a a6, pula para ordem_invalida
	addi a6, zero, 10 # Define a6 como 10
	bgt a0, a6, ordem_invalida # Se a0 È maior que a6, pula para ordem_invalida
	add t1, zero, a0 # Copia o valor de a0 para t1
	addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
	la a0, tipo # Carrega o endereÁo da string "tipo" para a0
	ecall # Realiza a chamada de sistema para imprimir
	addi a7, zero, 5 # Define a7 como 5 para a chamada de sistema de leitura
	ecall # Realiza a chamada de sistema para ler um n˙mero inteiro
	addi a6, zero, 1 # Define a6 como 1
	blt a0, zero, execucao_invalida # Se a0 È menor que zero, pula para execucao_invalida
	bgt a0, a6, execucao_invalida # Se a0 È maior que a6, pula para execucao_invalida
	la a1, matriz_A # Carrega o endereÁo da matriz_A para a1
	la a2, matriz_B # Carrega o endereÁo da matriz_B para a2
	la a3 matriz_C # Carrega o endereÁo da matriz_C para a3
	beq a0, zero, linha_coluna # Se a0 È igual a zero, pula para linha_coluna
	add a0, zero, t1 # Copia o valor de t1 para a0
	jal ra, soma_coluna_linha # Pula para soma_coluna_linha e armazena o endereÁo de retorno em ra
	jal fim # Pula para fim
linha_coluna:
	add a0, zero, t1 # Copia o valor de t1 para a0
	jal ra, soma_linha_coluna # Pula para soma_linha_coluna e armazena o endereÁo de retorno em ra
	jal fim # Pula para fim
ordem_invalida:
	addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
	la a0, valor_invalido # Carrega o endereÁo da string "valor_invalido" para a0
	ecall # Realiza a chamada de sistema para imprimir
	jal main # Pula para main
execucao_invalida:
	addi a7, zero, 4 # Define a7 como 4 para a chamada de sistema de impress„o
	la a0, tipo_invalido # Carrega o endereÁo da string "tipo_invalido" para a0
	ecall # Realiza a chamada de sistema para imprimir
	jal main # Pula para main
fim:
	addi a7, zero, 10 # Define a7 como 10 para a chamada de sistema de finalizaÁ„o
	ecall # Realiza a chamada de sistema para finalizar o programa
